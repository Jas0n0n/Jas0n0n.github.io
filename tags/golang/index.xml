<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Golang - Tag - Sun Blog</title>
        <link>http://example.org/tags/golang/</link>
        <description>Golang - Tag - Sun Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 08 Jul 2022 11:04:38 &#43;0800</lastBuildDate><atom:link href="http://example.org/tags/golang/" rel="self" type="application/rss+xml" /><item>
    <title>TcpScanner Using Golang</title>
    <link>http://example.org/posts/sun-2d-tcpscanner/</link>
    <pubDate>Fri, 08 Jul 2022 11:04:38 &#43;0800</pubDate>
    <author>Jason</author>
    <guid>http://example.org/posts/sun-2d-tcpscanner/</guid>
    <description><![CDATA[1.0 基础版的非并发版扫描 package main import( &#34;fmt&#34; &#34;net&#34; ) func main(){ for i:=1;i&lt;=1024;i++{ address :=fmt.Sprintf(&#34;127.0.0.1:%d&#34;,i) conn,err:=net.Dial(&#34;tcp&#34;,address) if err!=nil{ //端口已关闭或过滤 continue } conn.Close() fmt.Printf(&#34;%d is open\n&#34;,i) } } 2.0 WaitGrop并发控制版扫描 package main import ( &#34;fmt&#34; &#34;net&#34; &#34;sync&#34; ) func main(){ var wg sync.WaitGroup for i:=0;i&lt;1024;i++{ wg.Add(1) go func(j int){ defer wg.Done address :=fmt.Sprintf(&#34;127.0.0.1:%d&#34;,j) conn,err :=net.Dial(&#34;tcp&#34;,address) if err !=nil{ return } }(i) } wg.Wait() } 3.0 多通道版端口扫描 package main import ( &#34;fmt&#34; &#34;net&#34; &#34;sort&#34; ) func worker(ports,results chan int){ for p:=range ports{ address :=fmt.]]></description>
</item>
</channel>
</rss>
